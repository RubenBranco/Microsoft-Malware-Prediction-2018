import pandas as pd
import numpy as np
import math


class MalwareData:
    
    labelled_dtypes = [
        "O",
    ]

    def __init__(self, batch_size):
        self._df = None
        self._labels = dict()
        self._batch_size = batch_size
        self._current_idx = 0

    def setup(self, data_path):
        self._df = pd.read_csv(data_path)
        self._setup_labels()

    def _setup_labels(self):
        """
        NOTE:
            Too many iterations for such large data, fine for now
            but refactor later !!!
        """
        for column in self._df.columns:
            if self._df[column].dtype in self.labelled_dtypes and column != "MachineIdentifier":
                self._labels[column] = []
        
        for i in range(len(self._df)):
            for column in self._labels:
                if self._df[column][i] not in self._labels[column]:
                    self._labels[column].append(self._df[column][i])

    def __iter__(self):
        return self

    def __len__(self):
        return int(math.ceil(len(self._df) / self._batch_size))

    def __next__(self):
        inputs = []
        outputs = []

        for i in range(self._current_idx, self._current_idx + self._batch_size):
            for column in self._df.columns:
                if column not in ["MachineIdentifier", "HasDetections"]:
                    inputs.append(self._df[column][i] if column not in self._labels else self._labels[column].index(self._df[column][i]))
            outputs.append(self._df["HasDetections"][i])
        self._current_idx += self._batch_size

        return (np.array(inputs, dtype=np.float32), np.array(outputs, dtype=np.float32))
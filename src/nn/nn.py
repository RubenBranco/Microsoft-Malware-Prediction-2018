from sklearn.metrics import roc_auc_score
from keras.models import Model
from keras.layers import Input, Dense
from keras.callbacks import ModelCheckpoint
from .common import data_reader


class MalwareModel:
    def __init__(self, epochs, batch_size, dense_size, dense_stack_size, data_path):
        self._epochs = epochs
        self._dense_size = dense_size
        self._data_path = data_path
        self._dense_stack_size = dense_stack_size
        self._model = None
        self._data_gen = data_reader.MalwareData(batch_size)
        self._data_gen.setup()

    def build_model(self):
        machine_input = Input((80,), name="input")

        d = Dense(self._dense_size, activation="relu", input_shape=(80,))(machine_input)

        for _ in range(self._dense_stack_size):
            d = Dense(self._dense_size, activation="relu")(d)
        
        # probability of a machine being infected
        probability = Dense(1, activation="sigmoid")(d)
        self._model = Model(inputs=[machine_input], outputs=probability)
        self._model.compile(loss='binary_crossentropy', optimizer='rmsprop')

    def load(self, fname):
        self._model.load_weights(fname)

    def train(self):
        self._model.fit_generator(
            self._data_gen,
            epochs=self._epochs,
            verbose=2,
            callbacks=[
                ModelCheckpoint("model.{epoch:02d}.hdf5")
            ],
        )

    """
    TODO
    * Predict on testset
    """